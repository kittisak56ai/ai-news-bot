import feedparser
from deep_translator import GoogleTranslator
from transformers import pipeline
from gtts import gTTS
from PIL import Image, ImageDraw, ImageFont
import requests
import time

DISCORD_WEBHOOK_URL = "https://discord.com/api/webhooks/1391393540252237886/mfR4DoXUhNHJ03EJIaWMxca3M87kxTnfIpLsnmLE0aJb2R5gTtngi6UL5lc7pTBbhPpN"

rss_feeds = {
    "‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á": "http://feeds.bbci.co.uk/news/politics/rss.xml",
    "‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à": "http://feeds.reuters.com/reuters/businessNews",
    "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ": "http://feeds.bbci.co.uk/news/technology/rss.xml",
    "AI": "https://www.reuters.com/technology/ai/feed",
    "‡∏´‡∏∏‡πâ‡∏ô": "https://feeds.finance.yahoo.com/rss/2.0/headline?s=^DJI,^GSPC,^IXIC&region=US&lang=en-US",
    "‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï": "https://cryptonews.com/news/feed",
    "‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°": "http://feeds.bbci.co.uk/news/world/rss.xml",
    "‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏≠‡∏±‡∏û": "https://techcrunch.com/startups/feed/",
    "‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏ô ‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏ï‡∏ï‡πå": "https://news.google.com/rss/search?q=warren+buffett",
    "‡∏Ç‡πà‡∏≤‡∏ß‡∏¢‡∏≤": "https://www.fiercepharma.com/rss.xml"
}

KEYWORDS = [
    "trump", "donald trump", "‡πÇ‡∏î‡∏ô‡∏±‡∏•‡∏î‡πå ‡∏ó‡∏£‡∏±‡∏°‡∏õ‡πå",
    "elon musk", "‡∏≠‡∏µ‡∏•‡∏≠‡∏ô ‡∏°‡∏±‡∏™‡∏Å‡πå", "‡∏°‡∏±‡∏™‡∏Å‡πå",
    "warren buffett", "‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏ô ‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏ï‡∏ï‡πå", "‡πÄ‡∏ö‡∏¥‡∏£‡πå‡∏Å‡πÑ‡∏ä‡∏£‡πå",
    "stock", "‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô", "nasdaq", "dow jones", "s&p", "bond", "interest rate", "yield",
    "crypto", "‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï", "‡∏ö‡∏¥‡∏ó‡∏Ñ‡∏≠‡∏¢‡∏ô‡πå", "bitcoin", "ethereum", "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç", "defi",
    "ai", "‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå", "openai", "chatgpt", "deeplearning", "machine learning",
    "war", "‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°", "‡∏¢‡∏π‡πÄ‡∏Ñ‡∏£‡∏ô", "‡∏£‡∏±‡∏™‡πÄ‡∏ã‡∏µ‡∏¢", "‡πÑ‡∏ï‡πâ‡∏´‡∏ß‡∏±‡∏ô", "‡∏à‡∏µ‡∏ô", "‡∏≠‡∏¥‡∏™‡∏£‡∏≤‡πÄ‡∏≠‡∏•", "‡∏Æ‡∏≤‡∏°‡∏≤‡∏™", "‡∏Å‡∏≤‡∏ã‡∏≤",
    "pharma", "drug", "‡∏¢‡∏≤", "‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô", "fda", "clinical trial",
    "startup", "venture capital", "series a", "funding", "tech startup"
]

sent_links = set()
translator = GoogleTranslator(source='auto', target='th')
summarizer = pipeline("summarization", model="facebook/bart-large-cnn")

def summarize_and_translate(content):
    try:
        summary = summarizer(content, max_length=250, min_length=80, do_sample=False)[0]['summary_text']
        return translator.translate(summary)
    except:
        return content[:300]

def create_voice(text, filename="summary.mp3"):
    gTTS(text=text, lang="th").save(filename)

def create_image(title, summary, filename="news.png"):
    img = Image.new('RGB', (800, 600), color=(255, 255, 240))
    draw = ImageDraw.Draw(img)
    try:
        font_title = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 28)
        font_body = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 22)
    except:
        font_title = ImageFont.load_default()
        font_body = ImageFont.load_default()

    draw.text((40, 40), title, font=font_title, fill=(0, 0, 0))

    max_width = 720
    lines = []
    words = summary.split()
    line = ""
    for word in words:
        test_line = line + word + " "
        bbox = draw.textbbox((0, 0), test_line, font=font_body)
        w = bbox[2] - bbox[0]
        if w <= max_width:
            line = test_line
        else:
            lines.append(line)
            line = word + " "
    lines.append(line)

    y_text = 100
    line_height = 30
    for l in lines:
        draw.text((40, y_text), l, font=font_body, fill=(50, 50, 50))
        y_text += line_height

    img.save(filename)

def send_discord(text):
    data = {"content": text}
    response = requests.post(DISCORD_WEBHOOK_URL, json=data)
    if response.status_code == 204:
        print("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Discord ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    else:
        print("‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Discord ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", response.text)

def run_news_bot_loop(interval_seconds=60):
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏≠‡∏ó‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß Discord")
    while True:
        for cat, url in rss_feeds.items():
            feed = feedparser.parse(url)
            if not feed.entries:
                continue

            entry = feed.entries[0]
            link = entry.link

            if link in sent_links:
                continue

            content = entry.get("summary", entry.get("description", ""))
            title = entry.title

            text_to_check = (title + " " + content).lower()
            if not any(kw in text_to_check for kw in KEYWORDS):
                continue

            title_th = translator.translate(title)
            summary_th = summarize_and_translate(content)

            full_text = (
                f"üóÇÔ∏è ‡∏´‡∏°‡∏ß‡∏î: {cat}\n"
                f"üì∞ {title_th}\n\n"
                f"üìÑ ‡∏™‡∏£‡∏∏‡∏õ:\n{summary_th}\n\n"
                f"üîó ‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠: {link}"
            )

            create_image(title_th, summary_th)
            create_voice(summary_th)
            send_discord(full_text)
            sent_links.add(link)
            print(f"üì® ‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î {cat}: {title}")

        time.sleep(interval_seconds)

if __name__ == "__main__":
    run_news_bot_loop(interval_seconds=60)
